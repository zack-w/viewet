<?php	if( !defined( "IN_VIEWIT" ) )	{		die("Access deined!");	}	function timeconcat($name, $time)	{		return ($time >= 1) ? ($time . " " . $name . (($time > 1) ? "s" : "")) : "";	}		class Video {			static $IsVideoValid, $ParseVideoURL, $findTrending, $getCategoryList, $categoryExist, $uploadVideo, $videoExists, $getData, $getEmbeed, $static_getImagePreview, $didUserLike, $postComment, $time_elapsed_B, $getComments, $updateViews, $videoCount, $doReport, $updateInfo, $getCommentData, $doCommentReport;		private $videoKey;			public function Video( $key )		{			$parsed_key = Video::ParseVideoURL( $key );			$this->videoKey = $parsed_key;		}			public function getImagePreview()		{			return "i2.ytimg.com/vi/". ($this->videoKey) ."/default.jpg";		}			///////////////////////////////////////		// Begin of static functions //////////		///////////////////////////////////////			public static function doCommentReport( $CommentID )		{			global $DB;						$DB->query( "INSERT INTO comment_reports (`CommentID`)VALUES(".$CommentID.");" );		}			public static function getCommentData( $CommentID )		{			global $DB;						$query = $DB->query("SELECT * FROM comments WHERE ID = ".$CommentID.";");			$query = $DB->get_arr( $query );						return $query;		}			public static function updateInfo( $VideoID, $Title, $Desc )		{			global $DB;						$Title = $DB->escape( $Title );			$Desc = $DB->escape( $Desc );						$DB->query("UPDATE videos SET Name = '".$Title."', Description = '".$Desc."' WHERE ID = ".$VideoID.";");		}			public static function doReport( $VideoID, $Reason )		{			global $DB, $User;						$Reason = $DB->escape( $Reason );						$DB->query("INSERT INTO video_reports (`VideoID`,`UserID`,`Reason`)VALUES(".$VideoID.", ".($User->getUserID()).", '".$Reason."');");		}			public static function getComments( $videoID, $page = 1 )		{			global $DB;						$videoID = $DB->escape( $videoID );			$page = $DB->escape( $page );						$page--;			$query = $DB->query("SELECT comments.*, users.username  FROM comments, users WHERE users.ID = comments.UserID AND VideoID = ".$videoID." ORDER BY Date DESC LIMIT ".$page.", 15;");						return $query;		}			public static function postComment( $videoID, $commentData )		{			global $DB, $User;						if( Video::videoExists( $videoID ) == 0 )			{				return;			}						$commentData = $DB->escape( $commentData );						$query = "INSERT INTO comments (`UserID`,`VideoID`,`Comment`,`Date`)VALUES(".$User->getUserID().", ".$videoID.", '".$commentData."', ".time().");";			$DB->query( $query );					return true;		}			public static function didUserLike( $VideoID )		{			global $DB, $User;					$UserID = $User->getUserID();			$VID = $DB->escape($VideoID);						$Query = $DB->query("SELECT COUNT(*) FROM votes WHERE UserID = ".$UserID." AND VideoID = ".$VID.";");			$QueryTable = $DB->get_arr( $Query );						if( $QueryTable[0] > 0 )			{				return 1;			}else{				return 0;			}		}			public static function static_getImagePreview( $key )		{			return "i2.ytimg.com/vi/". ( $key ) ."/default.jpg";		}			public static function ParseVideoURL( $unparsed_url = "" )		{			$pArr = explode( "v=", $unparsed_url );						if( empty( $pArr[1] ) )			{				return "1";			}						$pArr = explode( "&", $pArr[1] );			$parsed = $pArr[0];						if( empty( $parsed ) )			{				return "1";			}						return $parsed;		}			public static function IsVideoValid( $unparsed_url = "" )		{			$url = Video::ParseVideoURL( $unparsed_url );						$contents = file_get_contents( "http://gdata.youtube.com/feeds/api/videos/" . $url );			$contents = trim( strtolower( $contents ) );						if( $contents == "invalid id" || $contents == "video not found" )			{				return 0;			}						return 1;		}			public static function videoCount( $cat = 0 )		{			global $DB;						$addOn = ( $cat == 0 )?(""):(" WHERE Category = ".$cat);						$query = $DB->query("SELECT COUNT(*) FROM videos".$addOn.";");			$query = $DB->get_arr( $query );						return $query[0];		}			public static function findTrending( $cat = 0, $amount = 3, $page = 1, $method = 1 )		{			global $DB;						// 0 = Trending			// 1 = Most Viewed			// 2 = Highest Rating			// 3 = Newest						$Methods = array(				//"ORDER BY ((Rating / ((".time()." - Posted) / 86400)) + Views) DESC",				"ORDER BY (Rating / Views) DESC",				"ORDER BY Views DESC",				"ORDER BY Rating DESC",				"ORDER BY Posted DESC",			);						if( empty( $Methods[ $method ] ) ){ $method = 0; }						$queryStr = "SELECT videos.*, users.username FROM videos, users WHERE".(($cat==0)?(""):(" Category = " . $cat . " AND"))." users.ID = videos.Uploader " . $Methods[ $method ] . " LIMIT ".(($page * $amount) - $amount).", ".$amount.";";						$cat = $DB->escape( $cat );			$amount = $DB->escape( $amount );						//$query = $DB->query("SELECT videos.*, users.username FROM videos, users WHERE".(($cat==0)?(""):(" Category = " . $cat . " AND"))." users.ID = videos.Uploader ORDER BY ((Rating / ((".time()." - Posted) / 86400)) + Views) DESC LIMIT 0, ".$amount.";");			$query = $DB->query( $queryStr );						return $query;		}			public static function getCategoryList()		{			global $DB;					$query = $DB->query( "SELECT * FROM categories;" );						while( $cat = $DB->get_arr($query ) )			{				$ret .= "<option value='".$cat[0]."'>".$cat[1]."</option>";			}						$ret .= "</select>";			return $ret;		}			public static function getCategories()		{			global $DB;						$query = $DB->query("SELECT * FROM categories;");			return $query;		}			public static function categoryExist($cat = 0)		{			global $DB;						$cat = $DB->escape( $cat );			$query = $DB->query("SELECT * FROM categories WHERE ID = ".$cat.";");						return ( $DB->num_rows( $query ) > 0 )?(1):(0);		}			public static function categoryInfo($cat = 0)		{			global $DB;						$cat = $DB->escape( $cat );			$query = $DB->query("SELECT * FROM categories WHERE ID = ".$cat.";");						return ( $DB->get_arr( $query ) );		}			public static function uploadVideo($name, $url, $cat, $desc = "No description was added!")		{			global $DB, $User;					$url = Video::ParseVideoURL( $url );						$url = $DB->escape( $url );			$name = $DB->escape( $name );			$cat = $DB->escape( $cat );			$desc = $DB->escape( $desc );			$desc = strip_tags( $desc );						$order   = array("\r\n", "\n", "\r");			$replace = '<br />';						$desc = str_replace($order, $replace, $desc);						$cat = ($cat == 0)?(1):($cat);						$DB->query("INSERT INTO videos (`Name`,`Protocol`,`Key`,`Uploader`,`Posted`,`Description`,`Category`)VALUES('".$name."', 1, '".$url."', ".($User->getUserID()).", ".time().", '".$desc."',".$cat.");");			$DB->query("UPDATE categories SET NumVideos = NumVideos + 1 WHERE ID = ".$cat.";");			$DB->query("UPDATE users SET LastUpload = ".time()." AND NumUploads = NumUploads + 1 WHERE ID = ".($User->getUserID()).";");						return $DB->last_id();		}			public static function videoExists($id)		{			global $DB;						$id = $DB->escape($id);						$query = $DB->query("SELECT * FROM videos WHERE ID = ".$id.";");			$cnt = $DB->row_cnt( $query );						return ( $cnt > 0 )?(1):(0);		}			public static function getData($id)		{			global $DB;						$id = $DB->escape($id);						$query = $DB->query("SELECT videos.*, users.username FROM videos, users WHERE videos.ID = ".$id." AND users.ID = videos.Uploader;");			$arr = $DB->get_arr($query);						return $arr;		}			public static function updateViews( $id )		{			global $DB;						$DB->query( "UPDATE videos, categories SET videos.Views = videos.Views + 1, categories.NumViews =  categories.NumViews + 1 WHERE videos.ID = " .$id. " AND categories.ID = videos.Category;" );		}			public static function getEmbeed($id)		{			global $DB;					Video::updateViews($id);					$data = Video::getData($id);			return '<iframe width="560" height="315" src="http://www.youtube.com/embed/'.$data['Key'].'" frameborder="0" allowfullscreen></iframe>';		}			public static function time_elapsed_B($tsecs)		{			if ($tsecs < 1) return "";						$years  = $tsecs / 31556926 % 12;			$months = floor($tsecs / 31556926);			$weeks  = $tsecs / 604800 % 52;			$days   = $tsecs / 86400 % 7;			$hours  = $tsecs / 3600 % 24;			$mins   = $tsecs / 60 % 60;			$secs   = $tsecs % 60;						$ret = "";						if ($years >= 1)				$ret = timeconcat("year", $years);			elseif ($months >= 1)				$ret = timeconcat("month", $months);			elseif ($weeks >= 1)				$ret = timeconcat("week", $weeks);			elseif ($days >= 1)				$ret = timeconcat("day", $days);			elseif ($hours >= 1)				$ret = timeconcat("hour", $hours);			elseif ($mins >= 1)				$ret = timeconcat("minute", $mins);			else				$ret = timeconcat("second", $secs);							return $ret . " ago";		}			}?>